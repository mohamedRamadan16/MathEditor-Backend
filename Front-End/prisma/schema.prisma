generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id        String              @id @default(uuid()) @db.Uuid
  handle    String?             @unique
  name      String
  head      String              @db.Uuid
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
  authorId  String              @db.Uuid
  published Boolean             @default(false)
  collab    Boolean             @default(false)
  private   Boolean             @default(false)
  baseId    String?             @db.Uuid
  base      Document?           @relation("BaseForks", fields: [baseId], references: [id])
  forks     Document[]          @relation("BaseForks")
  revisions Revision[]
  author    User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coauthors DocumentCoauthers[]
}

model Revision {
  id         String   @id @default(uuid()) @db.Uuid
  data       Json
  createdAt  DateTime @default(now())
  documentId String   @db.Uuid
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String   @db.Uuid
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(uuid()) @db.Uuid
  handle        String?             @unique
  name          String
  email         String              @unique
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  disabled      Boolean             @default(false)
  emailVerified DateTime?
  lastLogin     DateTime?
  image         String?
  role          String              @default("user")
  accounts      Account[]
  sessions      Session[]
  revisions     Revision[]
  documents     Document[]
  coauthored    DocumentCoauthers[]
}

model DocumentCoauthers {
  documentId String   @db.Uuid
  userEmail  String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([documentId, userEmail])
}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
